@page "/profile"

@inject IRepositories repository;
@inject NavigationManager Navigation;
@inject IUserManager UserManager;
@inject IRoleManager RoleManager;


@layout MainLayout
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims


<div class="card col-6">
    <EditForm model="User">
        <div class="row pl-1"><h5>Register</h5></div>
        <div class="row">
            <div class="col">
                <div class="form-item left">
                    <label class="label">Nombres:</label>
                    <input type="text" @bind="User.FirstName" class="form-input" placeholder="Nombres" />
                </div>
                <div class="form-item left">
                    <label class="label">Apellidos:</label>
                    <input type="text" @bind="User.LastName" class="form-input" placeholder="Apellidos" />
                </div>
                <div class="form-item left">
                    <label class="label">Email:</label>
                    <input type="text" @bind="User.Email" class="form-input" placeholder="Email" />
                </div>
            </div>
            <div class="col">
                <div class="form-item left">
                    <label class="label">Teléfono:</label>
                    <input type="text" @bind="User.Phone" class="form-input" placeholder="Teléfono" />
                </div>
                <div class="form-item left">
                    <label class="label">Teléfono:</label>
                    <input type="text" @bind="User.DNI" class="form-input" placeholder="Teléfono" />
                </div>
                <div class="form-item submit-button">
                    <button class="btn" @onclick="OnSave">Guardar</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>
<style>
    .card
    {
        justify-content:left;
     
    }
    .submit-button
    {
        height:90px;
        justify-content:center;
        align-items:flex-end;
    }
    .submit-button .btn
    {
        margin-bottom:10px;
        margin-top:10px;
    }
</style>




@code{
    User User = new User();

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    public List<Role> Lista = new List<Role>();
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;
        Lista = await RoleManager.GetRoles();
        if (user.Identity.IsAuthenticated)
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            Console.WriteLine(claim + "aqui estoy");

            var id = Convert.ToInt64(claim?.Value);
            Console.WriteLine(id);

            var userResponse = await UserManager.GetUser(id);

            if (userResponse != null)
            {
                User = (User)userResponse;
            }
            else
            {
                Navigation.NavigateTo("/");
            }

        }
        else
        {
            Console.WriteLine("aqui estoy y no pasa nada");
        }

    }
    public void AddRole(long Id)
    {
        User.Roles_Id =Id;
        Console.WriteLine(Id);
    }
    private async Task OnSave()
    {
        await UserManager.UpdateUser(User);

    }
}