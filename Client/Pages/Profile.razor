@page "/profile"

@inject IRepositories repository;
@inject NavigationManager Navigation;
@inject IUserManager UserManager;
@inject IRoleManager RoleManager;


@layout MainLayout
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims


<div class="card">
    <EditForm model="User">
        <div class="d-flex flex-column">
            <div class="row">Register</div>
            <div class="form-item">
                <label class="label">Nombres:</label>
                <input type="text" @bind="User.FirstName" class="form-input" placeholder="Nombres" />
            </div>
            <div class="form-item">
                <label class="label">Apellidos:</label>
                <input type="text" @bind="User.LastName" class="form-input" placeholder="Apellidos" />
            </div>
            <div class="form-item">
                <label class="label">Email:</label>
                <input type="text" @bind="User.Email" class="form-input" placeholder="Email" />
            </div>
            <div class="form-item">
                <label class="label label-textarea" for="textarea">Sobre ti:</label>
                <textarea type="text" @bind="User.AboutMe" class="form-input" placeholder="Escribe una nota sobre ti" id="textarea" />
            </div>

            <div class="form-select mt-1">
                <Select PlaceHolder="Roles">
                    @if (Lista != null)
                    {
                    @foreach (var rol in Lista)
                        {
                        <li value="@rol.Id" @onclick="@(() => { AddRole(rol.Id); })">@rol.Roles</li>
                        }
                     }
                    
                </Select>
            </div>
            <div class="form-item">
                <button class="btn btn-primary" @onclick="OnSave">Guardar</button>
            </div>
        </div>
    </EditForm>
</div>




@code{
    User User = new User();

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    public List<Role> Lista = new List<Role>();
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;
        Lista = await RoleManager.GetRoles();
        if (user.Identity.IsAuthenticated)
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            Console.WriteLine(claim + "aqui estoy");

            var id = Convert.ToInt64(claim?.Value);
            Console.WriteLine(id);

            var userResponse = await UserManager.GetUser(id);

            if (userResponse != null)
            {
                User = (User)userResponse;
            }
            else
            {
                Navigation.NavigateTo("/");
            }

        }
        else
        {
            Console.WriteLine("aqui estoy y no pasa nada");
        }

    }
    public void AddRole(long Id)
    {
        User.Roles_Id =Id;
        Console.WriteLine(Id);
    }
    private async Task OnSave()
    {
        await UserManager.UpdateUser(User);

    }
}